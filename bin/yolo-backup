#!/usr/bin/env bash
#
# A quick and dirty wrapper for restic (https://github.com/restic/restic)
#
# Usage:
#
# RESTIC_REPOSITORY=/backups/restic RESTIC_PASSWORD_FILE=/etc/restic/password RESTIC_EXCLUDE_FILE=/etc/restic/exclude $HOME/bin/yolo-backup
# RESTIC_REPOSITORY=gs:my-bucket/restic/$(hostname -f) GOOGLE_PROJECT_ID=1234 GOOGLE_APPLICATION_CREDENTIALS=/etc/restic/gs-secret-restic-key.json $HOME/bin/yolo-backup
#
# (c) 2017, Benjamin Dos Santos <benjamin.dossantos@gmail.com>
# https://github.com/bdossantos/dotfiles
#

set -o errexit
set -o pipefail
set -o nounset

DEBUG=${DEBUG:=0}
[[ $DEBUG -eq 1 ]] && set -o xtrace

COMPRESS_PROGRAM='gzip'
PATH="${PATH}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
RESTIC_BACKUP_TARGET_DIRECTORY=${RESTIC_BACKUP_TARGET_DIRECTORY:='/'}
RESTIC_EXCLUDE_FILE=${RESTIC_EXCLUDE_FILE:='/dev/null'}
RESTIC_PASSWORD_FILE=${RESTIC_PASSWORD_FILE:='/dev/null'}
RESTIC_REPOSITORY=${RESTIC_REPOSITORY:-}
RESTIC_KEEP_LAST=${RESTIC_KEEP_LAST:=180}
SYSLOG=${SYSLOG=0}

readonly NPROC=$(grep -c processor </proc/cpuinfo || 4)

if command -v pigz >/dev/null; then
  COMPRESS_PROGRAM='pigz'
fi

export \
  PATH \
  RESTIC_PASSWORD_FILE \
  RESTIC_REPOSITORY

[[ $SYSLOG -eq 1 ]] && exec &> >(logger -s -t "$(basename "$0")")

function _restic_backup_files() {
  if [[ ! -r $RESTIC_EXCLUDE_FILE ]]; then
    echo >&2 "--> Exclude file list is not readable: ${RESTIC_EXCLUDE_FILE}"
    exit 1
  fi

  echo "--> Backup the following target: ${RESTIC_BACKUP_TARGET_DIRECTORY}"

  # temporarly disable pipefail, see below
  set +o pipefail

  # don't forget to use `xattrs` flag when restoring
  tar \
    --exclude-from="$RESTIC_EXCLUDE_FILE" \
    --xattrs \
    --warning=no-file-changed \
    --warning=no-file-removed \
    --use-compress-program="$COMPRESS_PROGRAM" \
    -cpf - \
    / |
    restic \
      backup \
      --stdin \
      --stdin-filename='/system.tar.gz' \
      --exclude-file="$RESTIC_EXCLUDE_FILE"

  # Ignore exit code == 1, "Some files differ" warning, happen often when backup
  # the / of a busy (or not) system.
  # See https://www.gnu.org/software/tar/manual/html_section/tar_19.html
  # shellcheck disable=SC2181
  exit_code=$?

  set -o pipefail

  if [[ $exit_code -eq 0 ]] || [[ $exit_code -eq 1 ]]; then
    return 0
  else
    exit "$exit_code"
  fi
}

function _restic_backup_mysql_xtrabackup() {
  echo '--> Backup all mysql databases'

  if [[ -r /etc/mysql/debian.cnf ]]; then
    MYSQL_DEFAULT_FILES='/etc/mysql/debian.cnf'
  else
    MYSQL_DEFAULT_FILES="/root/.my.cnf"
  fi

  # How to restore a full backup:
  #
  #   - mkdir /var/tmp/backup/ && restic restore e60e029c --target /var/tmp/
  #   - xbstream -x -C /var/tmp/backup/ < /var/tmp/xtrabackup.xbstream
  #   - xtrabackup --decompress --remove-original --parallel=$(nproc) --target-dir=/var/tmp/backup
  #   - xtrabackup --prepare --target-dir=/var/tmp/backup
  #   - service mysql stop && mv /var/lib/mysql /var/lib/mysql.back
  #   - mv /var/tmp/backup /var/lib/mysql && chown -R mysql.mysql /var/lib/mysql
  #
  # How to restore a single table:
  #
  #   - mkdir /var/tmp/backup/ && restic restore e60e029c --target /var/tmp/
  #   - xbstream -p $(nproc) -x -C /var/tmp/backup/ < /var/tmp/xtrabackup.xbstream
  #   - xtrabackup --decompress --remove-original --parallel=$(nproc) --target-dir=/var/tmp/backup
  #   - xtrabackup --prepare --export --innodb-file-per-table --target-dir=/var/tmp/backup
  #   - chown -R mysql.mysql /var/tmp/backup
  #   - mysql> ALTER TABLE my_db.person_tags DISCARD TABLESPACE;
  #   - mv /var/lib/mysql/my_db/person_tags.* /var/tmp/
  #   - cp -v /var/tmp/backup/my_db/person_tags.* /var/lib/mysql/my_db/
  #   - mysql> ALTER TABLE my_db.person_tags IMPORT TABLESPACE
  xtrabackup \
    --defaults-file="$MYSQL_DEFAULT_FILES" \
    --backup \
    --compress \
    --compress-threads="$((NPROC / 2))" \
    --galera-info \
    --parallel="$((NPROC / 2))" \
    --slave-info \
    --stream=xbstream \
    --target-dir=./ |
    restic \
      backup \
      --stdin \
      --stdin-filename='/xtrabackup.xbstream' \
      --exclude-file="$RESTIC_EXCLUDE_FILE"
}

function _restic_backup_mysql() {
  echo '--> Backup all mysql databases'

  if [[ -r /etc/mysql/debian.cnf ]]; then
    MYSQL_DEFAULT_FILES='/etc/mysql/debian.cnf'
  else
    MYSQL_DEFAULT_FILES="/root/.my.cnf"
  fi

  mysqldump \
    --defaults-file="$MYSQL_DEFAULT_FILES" \
    --all-databases \
    --events \
    --quick \
    --routines \
    --single-transaction \
    --triggers |
    $COMPRESS_PROGRAM \
      --best \
      --stdout |
    restic \
      backup \
      --stdin \
      --stdin-filename="/mysql.sql.gz" \
      --exclude-file="$RESTIC_EXCLUDE_FILE"
}

function _restic_backup_postgresql() {
  su - postgres -c 'pg_dumpall' |
    $COMPRESS_PROGRAM \
      --best \
      --stdout |
    restic \
      backup \
      --stdin \
      --stdin-filename="/postgresql.sql.gz" \
      --exclude-file="$RESTIC_EXCLUDE_FILE"
}

function _restic_check() {
  # Tell restic to also verify the integrity of the pack files in the repository
  # each sunday.
  if [[ $(date +%w) == 7 ]]; then
    restic check --read-data
  else
    restic check --with-cache
  fi
}

function _restic_forget() {
  echo "--> restic forget keep last ${RESTIC_KEEP_LAST}"

  restic forget --keep-last "$RESTIC_KEEP_LAST" --cleanup-cache

  # run restic prune each sunday
  if [[ $(date +%w) == 7 ]]; then
    echo "--> Run restic prune"
    restic prune
  fi
}

function _restic_init() {
  if [[ ! -r $RESTIC_PASSWORD_FILE ]]; then
    echo >&2 "--> Password file is not readable: ${RESTIC_PASSWORD_FILE}"
    exit 1
  fi

  restic version

  if ! restic snapshots; then
    echo "--> init restic repository to ${RESTIC_REPOSITORY}"
    restic init
  fi
}

function _restic_stats() {
  restic stats
}

function _unlock() {
  echo '--> Unlock restic'
  restic unlock
  exit 2
}

function main() {
  cd /

  _restic_init

  trap _unlock ERR

  if command -v xtrabackup >/dev/null && command -v xbstream >/dev/null; then
    _restic_backup_mysql_xtrabackup
  fi

  if command -v mysqld >/dev/null; then
    _restic_backup_mysql
  fi

  if command -v pg_dumpall >/dev/null; then
    _restic_backup_postgresql
  fi

  _restic_backup_files

  _restic_forget

  _restic_check

  _restic_stats

  echo '--> Backup Finished!'
}

main
