#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

OS="$(uname)"
[[ $OS != 'Darwin' ]] && exit 0

echo '--> configure dnsmasq'

mkdir -p "$HOME/.dnsmasq.d" "$HOME/.hosts.d"

cat <<EOT > "$(brew --prefix)/etc/dnsmasq.conf"
# https://github.com/drduh/OS-X-Security-and-Privacy-Guide#dnsmasq

# Forward queries to dnscrypt on localhost
server=127.0.0.1#5300
server=127.0.0.1#5301
server=127.0.0.1#5302
server=127.0.0.1#5303
server=127.0.0.1#9053

# Uncomment to forward queries to Google Public DNS
#server=8.8.8.8
#server=8.8.4.4

# Setting this flag forces dnsmasq to send all queries to all available servers.
# The reply from the server which answers first will be returned to the original requester.
all-servers

# Never forward plain names
domain-needed

# Blackhole Tor hidden services and local TLDs
address=/.onion/0.0.0.0
address=/.local/0.0.0.0
address=/.mycoolnetwork/0.0.0.0

# Never forward addresses in the non-routed address spaces
bogus-priv

# Reject private addresses from upstream nameservers
stop-dns-rebind

# Query servers in order
strict-order

# Set the size of the cache
# The default is to keep 150 hostnames
cache-size=8192

# Optional logging directives
log-async
log-dhcp
log-facility=/var/log/dnsmasq.log

# Uncomment to log all queries
#log-queries

# Uncomment to enable DNSSEC
#dnssec
#trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5
#dnssec-check-unsigned

# Pass through DNSSEC validation results from dnscrypt-proxy.
proxy-dnssec

# user
user=nobody

# Include localconfig
conf-dir=${HOME}/.dnsmasq.d,*.conf

# Additional hosts file
addn-hosts=${HOME}/.hosts.d
EOT

# Extending and consolidating hosts files, https://github.com/StevenBlack/hosts
curl -s 'https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling/hosts' \
  > "$HOME/.hosts.d/hosts"

# restart dnsmasq
su admin -c "sudo ${HOME}/.homebrew/bin/brew services restart dnsmasq"

# Configure dnscrypt
DNSCRYPT_PROXY_PORT=5300
DNSCRYPT_RESOLVERS='dnscrypt.org-fr cs-fr cs-fr2 cs-uk'

for resolver in $DNSCRYPT_RESOLVERS; do
  plist="$(brew --prefix)/opt/dnscrypt-proxy/homebrew.mxcl.dnscrypt-proxy.${DNSCRYPT_PROXY_PORT}.plist"

  cat <<EOT > "$plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-/Apple/DTD PLIST 1.0/EN" "http:/www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>homebrew.mxcl.dnscrypt-proxy.${DNSCRYPT_PROXY_PORT}</string>
    <key>KeepAlive</key>
    <true/>
    <key>RunAtLoad</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
      <string>$(brew --prefix)/opt/dnscrypt-proxy/sbin/dnscrypt-proxy</string>
      <string>--ephemeral-keys</string>
      <string>--local-address=127.0.0.1:${DNSCRYPT_PROXY_PORT}</string>
      <string>--logfile=/dev/null</string>
      <string>--resolver-name=${resolver}</string>
      <string>--resolvers-list=$(brew --prefix)/opt/dnscrypt-proxy/share/dnscrypt-proxy/dnscrypt-resolvers.csv</string>
    </array>
    <key>StandardErrorPath</key>
    <string>/dev/null</string>
    <key>StandardOutPath</key>
    <string>/dev/null</string>
  </dict>
</plist>
EOT

  # We can't manage this "custom" service with `brew services`, use launchctl
  # directly.
  launchctl unload "$plist"
  launchctl load -w "$plist"

  DNSCRYPT_PROXY_PORT=$((DNSCRYPT_PROXY_PORT + 1))
done

# Ensure dnscrypt-proxy original instance managed by `brew services` is stopped
brew services stop dnscrypt-proxy 2>/dev/null || true

# Update dnscrypt resolvers
dnscrypt-update-resolvers

su admin -c "
sudo dscacheutil -flushcache
sudo killall -HUP mDNSResponder
"
